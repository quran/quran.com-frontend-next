@use "src/styles/constants";
@use "src/styles/breakpoints";
@use "sass:map";

@mixin center-horizontally {
  display: inline-block;
  margin: auto;
}

@mixin center-vertically {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

$scales-map: (
  default: (
    desktop: (
      1: 1,
      2: 1.5,
      3: 2,
      4: 2.5,
      5: 3,
    ),
    mobile: (
      1: 1,
      2: 1.2,
      3: 1.5,
      4: 2.8,
      5: 3.3,
    ),
  ),
  translation: (
    desktop: (
      1: 1,
      2: 1.2,
      3: 1.3,
      4: 1.5,
      5: 2,
    ),
    mobile: (
      1: 1,
      2: 1.1,
      3: 1.2,
      4: 1.4,
      5: 1.8,
    ),
  ),
);

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function get-scales($name, $device-type: "mobile") {
  @return map-deep-get($scales-map, $name, $device-type);
}

@mixin generate-font-sizes($name: "quran") {
  $mobile-scales: null;
  $desktop-scales: null;
  // if the current name has values other than the default ones
  @if map.has-key($scales-map, $name) {
    $mobile-scales: get-scales($name);
    $desktop-scales: get-scales($name, "desktop");
  } @else {
    $mobile-scales: get-scales("default");
    $desktop-scales: get-scales("default", "desktop");
  }

  @for $i from 1 through constants.$maximum-font-step {
    .#{$name}-font-size-#{$i} {
      font-size: calc(#{map.get($mobile-scales, $i)} * var(--font-size-normal));
      @include breakpoints.tablet {
        font-size: calc(
          #{map.get($desktop-scales, $i)} * var(--font-size-normal)
        );
      }
    }
  }
}
