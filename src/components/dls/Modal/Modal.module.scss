@use "src/styles/breakpoints";
@use "src/styles/utility";

$animationDuration: 0.35s;
$animationEasing: cubic-bezier(0.4, 0, 0.2, 1);
$desktopWidth: 90vw;
$desktopMaxWidth: calc(28.125 * var(--spacing-medium));
$mobileWidth: 100vw;

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes desktopContentIn {
  0% {
    opacity: 0;
    transform: translate(-50%, -70%);
  }
  100% {
    opacity: 1;
    transform: translate(-50%, -50%);
  }
}

@keyframes desktopContentOut {
  0% {
    transform: translate(-50%, -50%);
  }
  100% {
    transform: translate(-50%, -70%);
  }
}

@keyframes mobileContentIn {
  0% {
    transform: translate(0%, 100%);
  }
  100% {
    transform: translate(0%, 0%);
  }
}

@keyframes mobileContentOut {
  0% {
    transform: translate(0%, 0%);
  }
  100% {
    transform: translate(0%, 100%);
  }
}

.overlay {
  background-color: var(--color-background-backdrop);
  position: fixed;
  inset: 0;
}
.overlay[data-state="open"] {
  animation: fadeIn $animationDuration $animationEasing;
}
.overlay[data-state="closed"] {
  animation: fadeOut $animationDuration $animationEasing;
}

.content {
  background-color: white;
  border-radius: var(--border-radius-default) var(--border-radius-default) 0 0;
  overflow: hidden;
  box-shadow: var(--shadow-jumbo);
  position: fixed;
  bottom: 0%;
  width: $mobileWidth;
  &:focus {
    outline: none;
  }
  @include breakpoints.desktop {
    border-radius: var(--border-radius-default);
    width: $desktopWidth;
    max-width: $desktopMaxWidth;
    bottom: inherit;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
}
.content[data-state="open"] {
  animation: mobileContentIn $animationDuration $animationEasing,
    fadeIn $animationDuration $animationEasing;
  @include breakpoints.tablet {
    animation: desktopContentIn $animationDuration $animationEasing,
      fadeIn $animationDuration $animationEasing;
  }
}
.content[data-state="closed"] {
  animation: mobileContentOut $animationDuration $animationEasing,
    fadeIn $animationDuration $animationEasing;
  @include breakpoints.tablet {
    animation: desktopContentOut $animationDuration $animationEasing,
      fadeOut $animationDuration $animationEasing;
  }
}

.body {
  padding: var(--spacing-mega);
}

.title {
  text-align: center;
  font-weight: var(--font-weight-bold);
  font-size: var(--font-size-xlarge);
  line-height: var(--line-height-jumbo);
}
.subtitle {
  text-align: center;
  color: var(--color-text-faded);
  font-size: var(--font-size-normal);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-xlarge);
}

.footer {
  display: flex;
  justify-content: stretch;
}
.action {
  flex: 1;
  border: none;
  border-top: 1px solid var(--color-borders-hairline);
  font-size: var(--font-size-normal);
  background-color: inherit;
  padding: var(--spacing-large);
  color: var(--color-text-faded);
  overflow: hidden;
  transition: background-color $animationDuration $animationEasing;
  &:hover {
    opacity: var(--opacity-75);
    background-color: var(--color-background-alternative);
    color: var(--color-text-default);
  }
}
.action:not(:only-child):not(:last-child) {
  border-right: 1px solid var(--color-borders-hairline);
}
.action:last-child {
  color: var(--color-text-default);
}
.action[disabled] {
  opacity: var(--opacity-75);
  cursor: not-allowed;
  background-color: var(--color-background-alternative);
  color: var(--color-text-faded);
}

.header {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: var(--spacing-large);
}
.trigger {
  display: inline-block;
}
