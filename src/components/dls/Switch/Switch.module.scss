$selectedItemShadow: 0px 0px 4px 1px rgba(0, 0, 0, 0.1);
$container-padding: var(--spacing-xmicro);
$separatorOpacity: 0.2;
$switchHeight: 31px;
$background-container-padding: calc(0.8 * var(--spacing-xxsmall));

.container {
  position: relative;
  display: grid;
  background-color: var(--color-background-alternative-faded);
  border-radius: var(--border-radius-pill);
  padding-block-start: $container-padding;
  padding-block-end: $container-padding;
  padding-inline-start: $container-padding;
  padding-inline-end: $container-padding;
  grid-template-columns: repeat(
    auto-fit,
    minmax(0, 1fr)
  ); // use grid to prevent layout shift when `font-family: bold` on item selected https://css-tricks.com/bold-on-hover-without-the-layout-shift/
}

.alternativeVariant {
  background-color: var(--color-background-alternative-faint-new);
}

.xSmallContainer {
  height: $switchHeight;
  border-radius: var(--border-radius-large-px) !important;
  overflow: hidden;

  padding-block-start: 0;
  padding-block-end: 0;
  padding-inline-start: 0;
  padding-inline-end: 0;

  .selectedItemBackgroundContainer {
    padding-block-start: var(--spacing-xmicro);
    padding-block-end: var(--spacing-xmicro);
    width: calc((1 / 2) * 100% - var(--spacing-xmicro)) !important;
    border-radius: var(--border-radius-xlarge-px);

    // This ensures the background container has the right padding regardless of position
    &[style*="translateX(0%)"] {
      padding-inline-start: var(--spacing-xmicro);
      padding-inline-end: 0;

      .selectedItemBackground {
        padding-inline-start: 0;
        padding-inline-end: var(--spacing-xmicro);
      }
    }

    &[style*="translateX(100%)"] {
      padding-inline-start: 0;
      padding-inline-end: var(--spacing-xmicro);
      transform: translateX(calc(100% + var(--spacing-xmicro))) !important;

      .selectedItemBackground {
        padding-inline-start: var(--spacing-xmicro);
        padding-inline-end: 0;
      }
    }
  }
}

.item {
  cursor: pointer;
  color: var(--color-text-faded-new);
  background-color: transparent;
  border: none;
  z-index: 1;
  transition: color var(--transition-regular);
}

.itemSelected {
  color: var(--color-text-default-new);
}

.item[disabled] {
  cursor: not-allowed;
  opacity: var(--opacity-50);
}

.separatorLine {
  position: absolute;
  height: 100%;
  width: 1px;
}

.separatorLineVisible {
  &::before {
    content: "";
    position: absolute;
    transform: translateY(75%);
    width: 1px;
    height: 40%;
    border-inline-start: 1px solid var(--color-text-default-new);
    opacity: $separatorOpacity;
  }
}

.selectedItemBackgroundContainer {
  transition: transform var(--transition-regular) ease-in-out;
  // the `width` and the `transform` is controlled dynamically in React component. Check Switch.tsx

  position: absolute;
  height: 100%;
  z-index: 0;
  padding: $background-container-padding;
  box-sizing: border-box;

  .selectedItemBackground {
    border-radius: var(--border-radius-pill);
    box-shadow: $selectedItemShadow;
    background-color: var(--color-background-elevated);
    width: 100%;
    height: 100%;
  }
}

// sizing
.itemNormal {
  padding-block-start: var(--spacing-xsmall);
  padding-block-end: var(--spacing-xsmall);
  padding-inline-start: var(--spacing-small);
  padding-inline-end: var(--spacing-small);
  font-size: var(--font-size-normal);
}

.itemLarge {
  padding-block-start: var(--spacing-small);
  padding-block-end: var(--spacing-small);
  padding-inline-start: var(--spacing-small);
  padding-inline-end: var(--spacing-small);
}

.itemSmall {
  font-size: var(--font-size-xsmall);
  padding-block-start: var(--spacing-xxsmall);
  padding-block-end: var(--spacing-xxsmall);
  padding-inline-start: var(--spacing-small);
  padding-inline-end: var(--spacing-small);
}

.itemXSmall {
  font-size: var(--font-size-small);
  font-weight: var(--font-weight-semibold);
}
